<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Coderr.Client</name>
    </assembly>
    <members>
        <member name="T:Coderr.Client.CoderrClientException">
            <summary>
                Exception thrown in the codeRR library
            </summary>
            <remarks>
                <para>
                    We should not try to upload these.
                </para>
            </remarks>
        </member>
        <member name="T:Coderr.Client.Config.CoderrConfiguration">
            <summary>
                Configuration root object.
            </summary>
        </member>
        <member name="F:Coderr.Client.Config.CoderrConfiguration.ExceptionPreProcessor">
            <summary>
                Used to be able to process error reports before they are delivered.
            </summary>
        </member>
        <member name="F:Coderr.Client.Config.CoderrConfiguration.ReportPreProcessor">
            <summary>
                Visit generated reports before they are sent.
            </summary>
        </member>
        <member name="M:Coderr.Client.Config.CoderrConfiguration.#ctor">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Client.Config.CoderrConfiguration" />.
            </summary>
        </member>
        <member name="P:Coderr.Client.Config.CoderrConfiguration.ApplicationVersion">
            <summary>
                Version of your application
            </summary>
            <see cref="M:Coderr.Client.Config.CoderrConfiguration.AssignAssemblyVersion(System.Reflection.Assembly)" />
        </member>
        <member name="P:Coderr.Client.Config.CoderrConfiguration.ContextProviders">
            <summary>
                Used to add custom context info providers.
            </summary>
        </member>
        <member name="P:Coderr.Client.Config.CoderrConfiguration.FilterCollection">
            <summary>
                Used to decide which reports can be uploaded (for instance to sample reports in high volume systems).
            </summary>
        </member>
        <member name="P:Coderr.Client.Config.CoderrConfiguration.MaxNumberOfPropertiesPerCollection">
            <summary>
                Limit the amount of properties that can be collected per context collection.
            </summary>
            <remarks>
                <para>
                    Some collections can contain thousands of properties when building collections by reflecting objects. Those
                    will take time to process and analyze by the server
                    when a lot of reports are uploaded for the same incident. To limit that you can specify a property limit wich
                    will make the <see cref="T:Coderr.Client.Converters.ObjectToContextCollectionConverter" />
                    stop after a certain amount of properties (when invoked from within the library).
                </para>
            </remarks>
            <value>
                Default is 100.
            </value>
        </member>
        <member name="P:Coderr.Client.Config.CoderrConfiguration.QueueReports">
            <summary>
                Queue reports and upload them in the background.
            </summary>
            <remarks>
                <para>
                    This option is great if you do not want to freeze the UI while reports are being uploaded. They are queued in
                    an internal
                    queue until being uploaded in orderly fashion.
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Client.Config.CoderrConfiguration.ThrowExceptions">
            <summary>
                The library may throw exceptions if the server cannot be contacted / accept the upload.
            </summary>
            <remarks>
                <para>
                    Default is <c>true</c>, turn of before going to production.
                </para>
                <para>
                    You can use the <see cref="E:Coderr.Client.Uploaders.UploadDispatcher.UploadFailed" /> event to get aware of errors when this flag is set
                    to
                    <c>true</c>.
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Client.Config.CoderrConfiguration.Uploaders">
            <summary>
                The objects used to upload reports to the codeRR service.
            </summary>
        </member>
        <member name="P:Coderr.Client.Config.CoderrConfiguration.UserInteraction">
            <summary>
                Configure how the reporting UI will interact with the user.
            </summary>
        </member>
        <member name="P:Coderr.Client.Config.CoderrConfiguration.EnvironmentName">
            <summary>
            Which environment are we running in? Dev, Production etc.
            </summary>
        </member>
        <member name="M:Coderr.Client.Config.CoderrConfiguration.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Coderr.Client.Config.CoderrConfiguration.AddPartition(System.Action{Coderr.Client.Config.PartitionContext})">
            <summary>
                Configure a callback which is used to attach partitions to the error report
            </summary>
            <param name="callback"></param>
            <example>
                <code>
            // Example for ASP.NET
            Err.Configuration.AddPartition(ctx => {
               var aspNetContext = context as AspNetContext;
            
               // this check is required since different contexts are used
               // if you use multiple client libraries.
               if (aspNetContext?.HttpContext == null)
                   return null;
            
               ctx.AddPartition("DeviceId", ctx.HttpContext.Session["DeviceId"]);
            });
            </code>
            </example>
        </member>
        <member name="M:Coderr.Client.Config.CoderrConfiguration.AssignAssemblyVersion(System.Reflection.Assembly)">
            <summary>
                Version of the entry assembly in the user application
            </summary>
            <param name="assembly">Assembly containing the application version</param>
        </member>
        <member name="M:Coderr.Client.Config.CoderrConfiguration.AssignAssemblyVersion(System.String)">
            <summary>
                Your application version
            </summary>
            <param name="version">Assembly version, format: "1.0.0.0"</param>
        </member>
        <member name="M:Coderr.Client.Config.CoderrConfiguration.Credentials(System.Uri,System.String,System.String)">
            <summary>
                Configure uploads
            </summary>
            <param name="coderrServerAddress">Host. Host and absolute path to the codeRR server</param>
            <param name="appKey">Appkey from the web site</param>
            <param name="sharedSecret">Shared secret from the web site</param>
        </member>
        <member name="M:Coderr.Client.Config.CoderrConfiguration.Dispose(System.Boolean)">
            <summary>
                Dispose pattern.
            </summary>
            <param name="isDisposing">Invoked from the dispose method.</param>
        </member>
        <member name="T:Coderr.Client.Config.ExceptionPreProcessorHandler">
            <summary>
            Used to be able to process exceptions before they are converted into DTOs
            </summary>
            <param name="context">context info</param>
            <seealso cref="F:Coderr.Client.Config.CoderrConfiguration.ExceptionPreProcessor"/>
        </member>
        <member name="T:Coderr.Client.Config.ReportPreProcessorHandler">
            <summary>
            Used to be able to process error reports before they are delivered.
            </summary>
            <param name="report">Generated error report</param>
            <seealso cref="F:Coderr.Client.Config.CoderrConfiguration.ReportPreProcessor"/>
        </member>
        <member name="T:Coderr.Client.Config.NamespaceDoc">
            <summary>
                Main configuration objects. Assessible through the <see cref="P:Coderr.Client.Err.Configuration" /> property.
            </summary>
        </member>
        <member name="T:Coderr.Client.Config.PartitionContext">
            <summary>
                Context used for the partition callback.
            </summary>
        </member>
        <member name="M:Coderr.Client.Config.PartitionContext.#ctor(Coderr.Client.ContextCollections.ErrPartitionContextCollection,Coderr.Client.Reporters.IErrorReporterContext2)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Client.Config.PartitionContext" />.
            </summary>
            <param name="contextCollection">context to add partitions to.</param>
            <param name="reporterContext">
                Context used when collecting all other context data (before partition collection is
                invoked)
            </param>
        </member>
        <member name="P:Coderr.Client.Config.PartitionContext.ReporterContext">
            <summary>
                Context that the partition will be added to.
            </summary>
        </member>
        <member name="M:Coderr.Client.Config.PartitionContext.AddPartition(System.String,System.String)">
            <summary>
                Add a custom partition.
            </summary>
            <param name="partitionKey">Name of the segmentation</param>
            <param name="value">Value for the given partition key.</param>
        </member>
        <member name="M:Coderr.Client.Config.PartitionContext.SetTenant(System.String)">
            <summary>
                Partition incident on tenant.
            </summary>
            <param name="tenantId">Currently affected tenant (organization, team, company or similar)</param>
            <remarks>
                <para>
                    The string doesn't necessary have to be something that identifies the exact tenant, but can be a hashed id or
                    similar. The key objective is to see how many tenants that are affected and not who those tenants are.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Config.PartitionContext.SetUser(System.String)">
            <summary>
                Partition incident on users.
            </summary>
            <param name="userIdentifier">Currently affected user</param>
            <remarks>
                <para>
                    The string doesn't necessary have to be something that identifies the user, but can be a hashed userId or
                    similar. The key objective is to see how many users that are affected and not who those users are.
                </para>
            </remarks>
        </member>
        <member name="T:Coderr.Client.Config.UserInteractionConfiguration">
            <summary>
                Adopts the user interface and the reporting flow.
            </summary>
        </member>
        <member name="P:Coderr.Client.Config.UserInteractionConfiguration.AskForEmailAddress">
            <summary>
                Ask the user if he/she want to receive progress updates from you.
            </summary>
        </member>
        <member name="P:Coderr.Client.Config.UserInteractionConfiguration.AskUserForDetails">
            <summary>
                Display a dialog for the user where he/she can enter information about what he/she did when the exception was
                thrown.
            </summary>
        </member>
        <member name="P:Coderr.Client.Config.UserInteractionConfiguration.AskUserForPermission">
            <summary>
                Ask the user if we may upload the error report.
            </summary>
        </member>
        <member name="T:Coderr.Client.ContextCollections.CoderrCollectionProperties">
            <summary>
                Name of properties in the "CoderrData" collection which is used by the backend to analyze data.
            </summary>
        </member>
        <member name="F:Coderr.Client.ContextCollections.CoderrCollectionProperties.HashSource">
            <summary>
                Bypass the lookup algorithm in the backend and use this value to identify unique errors.
            </summary>
        </member>
        <member name="F:Coderr.Client.ContextCollections.CoderrCollectionProperties.Tags">
            <summary>
                Add these tags to the incident (value should be a comma separated list)
            </summary>
        </member>
        <member name="F:Coderr.Client.ContextCollections.CoderrCollectionProperties.CorrelationId">
            <summary>
                Used when identifying related incidents
            </summary>
        </member>
        <member name="F:Coderr.Client.ContextCollections.CoderrCollectionProperties.HighlightCollection">
            <summary>
                These collections should be displayed directly on the front page (above the stacktrace)
            </summary>
            <remarks>
                <para>
                    Value should be a comma separated list with context collection names.
                </para>
            </remarks>
        </member>
        <member name="F:Coderr.Client.ContextCollections.CoderrCollectionProperties.HighlightProperties">
            <summary>
                These collections should be displayed directly on the front page (above the stacktrace)
            </summary>
            <remarks>
                <para>
                    Value should be a comma separated list with "ContextCollectionName.PropertyName".
                </para>
            </remarks>
        </member>
        <member name="F:Coderr.Client.ContextCollections.CoderrCollectionProperties.QuickFact">
            <summary>
                Display this property directly in the quick facts box in the Coderr UI
            </summary>
            <remarks>
                <para>
                    String replace "{Name}" in the constant with your own property name.
                </para>
            </remarks>
        </member>
        <member name="T:Coderr.Client.ContextCollections.CoderrContextCollectionExtensions">
            <summary>
                Extensions to get the Coderr collection that we store meta data in
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextCollections.CoderrContextCollectionExtensions.GetCoderrCollection(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Get or create our collection
            </summary>
            <param name="context">context to find the collection in</param>
            <returns>collection</returns>
        </member>
        <member name="M:Coderr.Client.ContextCollections.CoderrContextCollectionExtensions.GetCoderrCollection(System.Collections.Generic.IList{Coderr.Client.Contracts.ContextCollectionDTO})">
            <summary>
                Get or create our collection
            </summary>
            <param name="collections">Collections array</param>
            <returns>collection</returns>
        </member>
        <member name="M:Coderr.Client.ContextCollections.CoderrContextCollectionExtensions.AddCorrelationId(System.Collections.Generic.IList{Coderr.Client.Contracts.ContextCollectionDTO},System.String)">
            <summary>
            Used to navigate through related errors (all related errors must have the same correlation id).
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextCollections.CoderrContextCollectionExtensions.AddCorrelationId(Coderr.Client.Reporters.IErrorReporterContext,System.String)">
            <summary>
            Used to navigate through related errors (all related errors must have the same correlation id).
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextCollections.CoderrContextCollectionExtensions.AddTag(System.Collections.Generic.IList{Coderr.Client.Contracts.ContextCollectionDTO},System.String)">
            <summary>
                Add a tag which can be used in the UI to limit search result.
            </summary>
            <param name="collections">instance</param>
            <param name="tagName">tag name</param>
        </member>
        <member name="M:Coderr.Client.ContextCollections.CoderrContextCollectionExtensions.AddQuickFact(System.Collections.Generic.IList{Coderr.Client.Contracts.ContextCollectionDTO},System.String,System.String)">
            <summary>
            Quick facts are shown in the UI in the right panel
            </summary>
            <param name="collections">instance</param>
            <param name="propertyName">property name</param>
            <param name="propertyValue">value</param>
        </member>
        <member name="M:Coderr.Client.ContextCollections.CoderrContextCollectionExtensions.AddHighlightedProperty(System.Collections.Generic.IList{Coderr.Client.Contracts.ContextCollectionDTO},System.String,System.String)">
            <summary>
            Highlighted properties are shown directly before the stack trace.
            </summary>
            <param name="collections">instance</param>
            <param name="contextCollectionName">Name of the context collection that the property is in</param>
            <param name="propertyName">Property to display (along with its value)</param>
        </member>
        <member name="M:Coderr.Client.ContextCollections.CoderrContextCollectionExtensions.AddHighlightedCollection(System.Collections.Generic.IList{Coderr.Client.Contracts.ContextCollectionDTO},System.String)">
            <summary>
            The first highlighted collection are selected per default in the context collection navigator.
            </summary>
            <param name="collections">instance</param>
            <param name="contextCollectionName">Name of the context collection that we should show all properties and their values from.</param>
        </member>
        <member name="M:Coderr.Client.ContextCollections.CoderrContextCollectionExtensions.AddTag(Coderr.Client.Reporters.IErrorReporterContext,System.String)">
            <summary>
                Add a tag which can be used in the UI to limit search result.
            </summary>
            <param name="context">instance</param>
            <param name="tagName">tag name</param>
        </member>
        <member name="M:Coderr.Client.ContextCollections.CoderrContextCollectionExtensions.AddHighlightedProperty(Coderr.Client.Reporters.IErrorReporterContext,System.String,System.String)">
            <summary>
            Highlighted properties are shown directly before the stack trace.
            </summary>
            <param name="context">instance</param>
            <param name="contextCollectionName">Name of the context collection that the property is in</param>
            <param name="propertyName">Property to display (along with its value)</param>
        </member>
        <member name="M:Coderr.Client.ContextCollections.CoderrContextCollectionExtensions.AddHighlightedCollection(Coderr.Client.Reporters.IErrorReporterContext,System.String)">
            <summary>
            The first highlighted collection are selected per default in the context collection navigator.
            </summary>
            <param name="context">instance</param>
            <param name="contextCollectionName">Name of the context collection that we should show all properties and their values from.</param>
        </member>
        <member name="M:Coderr.Client.ContextCollections.CoderrContextCollectionExtensions.AddQuickFact(Coderr.Client.Reporters.IErrorReporterContext,System.String,System.String)">
            <summary>
            Quick facts are shown in the UI in the right panel
            </summary>
            <param name="context">instance</param>
            <param name="propertyName">property name</param>
            <param name="propertyValue">value</param>
        </member>
        <member name="T:Coderr.Client.ContextCollections.ErrPartitionContextCollection">
            <summary>
                Partitioning is used to be able to drill down reports to see how errors affect your system or user base.
            </summary>
            <remarks>
                <para>
                    Do note that this feature is for codeRR Live and codeRR OnPremise only.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.ContextCollections.ErrPartitionContextCollection.#ctor">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Client.ContextCollections.ErrPartitionContextCollection" />
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextCollections.ErrPartitionContextCollection.AddPartition(System.String,System.String)">
            <summary>
                Add a custom partition.
            </summary>
            <param name="partitionKey">Name of the segmentation</param>
            <param name="value">Value for the given partition key.</param>
        </member>
        <member name="M:Coderr.Client.ContextCollections.ErrPartitionContextCollection.SetTenant(System.String)">
            <summary>
                Partition incident on tenant.
            </summary>
            <param name="tenantId">Currently affected tenant (organization, team, company or similar)</param>
            <remarks>
                <para>
                    The string doesn't necessary have to be something that identifies the exact tenant, but can be a hashed id or
                    similar. The key objective is to see how many tenants that are affected and not who those tenants are.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.ContextCollections.ErrPartitionContextCollection.SetUser(System.String)">
            <summary>
                Partition incident on users.
            </summary>
            <param name="userIdentifier">Currently affected user</param>
            <remarks>
                <para>
                    The string doesn't necessary have to be something that identifies the user, but can be a hashed userId or
                    similar. The key objective is to see how many users that are affected and not who those users are.
                </para>
            </remarks>
        </member>
        <member name="T:Coderr.Client.ContextCollections.IContextCollection">
            <summary>
                Context collections provide information about the current application state when the exception as thrown.
            </summary>
        </member>
        <member name="P:Coderr.Client.ContextCollections.IContextCollection.CollectionName">
            <summary>
                Name of this collection
            </summary>
        </member>
        <member name="P:Coderr.Client.ContextCollections.IContextCollection.Properties">
            <summary>
                Properties that this collection supply.
            </summary>
        </member>
        <member name="T:Coderr.Client.ContextCollections.NamespaceDoc">
            <summary>
                Contains context collections that have special meaning. They can for instance be used to drive features in the
                backend.
            </summary>
        </member>
        <member name="T:Coderr.Client.ContextCollections.UserCredentials">
            <summary>
                Carries the user credentials to the server.
            </summary>
            <remarks>
                <para>
                    Creates a context collection with the name <c>UserCredentials</c> with the properties <c>UserName</c> and if
                    available <c>DomainName</c>.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.ContextCollections.UserCredentials.#ctor(System.Security.Principal.IIdentity)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Client.ContextCollections.UserCredentials" />.
            </summary>
            <param name="identity">
                Identity, typically from <c>Thread.CurrentPrincipal.Identity</c> or <c>Request.User.Identity</c>
                .
            </param>
        </member>
        <member name="M:Coderr.Client.ContextCollections.UserCredentials.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Client.ContextCollections.UserCredentials" />.
            </summary>
            <param name="userName">User name</param>
            <param name="domainName">Domain name</param>
        </member>
        <member name="M:Coderr.Client.ContextCollections.UserCredentials.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Client.ContextCollections.UserCredentials" />.
            </summary>
            <param name="userName">User name without domain (i.e. should not include "domainName\")</param>
        </member>
        <member name="T:Coderr.Client.ContextCollections.UserSuppliedInformation">
            <summary>
                Information supplied by the user about this error.
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextCollections.UserSuppliedInformation.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.ContextCollections.UserSuppliedInformation" /> class.
            </summary>
            <param name="description">
                Description entered by the user. i.e. information about what the user did when the exception
                was thrown.
            </param>
            <param name="email">Email address (entered if the user want to get notified when the exception has been fixed).</param>
        </member>
        <member name="P:Coderr.Client.ContextCollections.UserSuppliedInformation.Description">
            <summary>
                Description entered by the user. i.e. information about what the user did when the exception was thrown
            </summary>
        </member>
        <member name="P:Coderr.Client.ContextCollections.UserSuppliedInformation.EmailAddress">
            <summary>
                Email address if the user wants to receive a notification when the error has been fixed.
            </summary>
        </member>
        <member name="P:Coderr.Client.ContextCollections.UserSuppliedInformation.UserIdentity">
            <summary>
                Specify the identity if you want to track which users are affected by an exception.
            </summary>
        </member>
        <member name="T:Coderr.Client.ContextProviders.AppInfoProvider">
            <summary>
                Collects information about the currently running application.
            </summary>
            <remarks>
                <para>
                    The collection is named <c>ApplicationInfo</c> and the collected information is:
                </para>
                <list type="table">
                    <listheader>
                        <term>Property name</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>ThreadCount</term>
                        <description>Number of OS threads.</description>
                    </item>
                    <item>
                        <term>HandleCount</term>
                        <description>Amount of OS handles that your application have opened.</description>
                    </item>
                    <item>
                        <term>StartTime</term>
                        <description>When the process was started.</description>
                    </item>
                    <item>
                        <term>TotalProcessorTime</term>
                        <description>
                            Total amount used by your process (including OS time like reading from files or sending stuff
                            over a socket).
                        </description>
                    </item>
                    <item>
                        <term>UserProcessorTime</term>
                        <description>Amount of time used to execute your code.</description>
                    </item>
                    <item>
                        <term>CurrentDirectory</term>
                        <description>Current directory.</description>
                    </item>
                    <item>
                        <term>MainModule</term>
                        <description>
                            Executable used to start the process, including the module name, file name, and module memory
                            details.
                        </description>
                    </item>
                    <item>
                        <term>ProcessName</term>
                        <description>Executable file name, without path and file extension.</description>
                    </item>
                    <item>
                        <term>WorkingSet</term>
                        <description>number of bytes of physical memory mapped to the process context.</description>
                    </item>
                    <item>
                        <term>VirtualMemorySize</term>
                        <description>Current size of virtual memory used by the process.</description>
                    </item>
                    <item>
                        <term>PrivateMemorySize</term>
                        <description>
                            Current size of memory used by the process that cannot be shared with other processes (i.e.
                            dedicated memory).
                        </description>
                    </item>
                    <item>
                        <term>BasePriority</term>
                        <description>Starting priority for threads created within the associated process.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="F:Coderr.Client.ContextProviders.AppInfoProvider.NameConstant">
            <summary>
                Name of the context collection
            </summary>
        </member>
        <member name="P:Coderr.Client.ContextProviders.AppInfoProvider.Name">
            <summary>
                Gets "ApplicationInfo"
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.AppInfoProvider.Collect(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
                Collection. Items with multiple values are joined using <c>";;"</c>
            </returns>
        </member>
        <member name="T:Coderr.Client.ContextProviders.AssemblyProvider">
            <summary>
                Collection information about all assemblies which has been loaded. Will be put into a collection named
                <c>Assemblies</c>.
            </summary>
        </member>
        <member name="P:Coderr.Client.ContextProviders.AssemblyProvider.Name">
            <summary>
                Gets "Assemblies"
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.AssemblyProvider.Collect(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
                Collection. Items with multiple values are joined using <c>";;"</c>
            </returns>
        </member>
        <member name="T:Coderr.Client.ContextProviders.ContextProvidersRegistrar">
            <summary>
                Registrar used to configure which kind of context information to provide for each unhandled exception
            </summary>
            <remarks>
                The built in providers can be found in the <see cref="N:Coderr.Client.ContextProviders" /> namespace.
            </remarks>
        </member>
        <member name="M:Coderr.Client.ContextProviders.ContextProvidersRegistrar.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.ContextProviders.ContextProvidersRegistrar" /> class.
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.ContextProvidersRegistrar.Add(Coderr.Client.ContextProviders.IContextInfoProvider)">
            <summary>
                Add a new provider
            </summary>
            <param name="provider">Provider to add</param>
            <exception cref="T:System.ArgumentNullException">provider</exception>
        </member>
        <member name="M:Coderr.Client.ContextProviders.ContextProvidersRegistrar.Clear">
            <summary>
                Remove all registered providers.
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.ContextProvidersRegistrar.Collect(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Collect context information from all context providers.
            </summary>
            <param name="context">
                CreateReport context (specialized for the different report adapters, for instance the ASP.NET
                adapter contains the current <c>HttpContext</c>)
            </param>
            <returns>
                Collected information
            </returns>
            <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="M:Coderr.Client.ContextProviders.ContextProvidersRegistrar.GetAddedProviderNames">
            <summary>
                Returns the name of all providers which have been added.
            </summary>
            <returns>String array (or an empty array)</returns>
        </member>
        <member name="M:Coderr.Client.ContextProviders.ContextProvidersRegistrar.Remove(System.String)">
            <summary>
                Remove the provider with the specified name
            </summary>
            <param name="name">The name (can be found using <see cref="M:Coderr.Client.ContextProviders.ContextProvidersRegistrar.GetAddedProviderNames" />).</param>
        </member>
        <member name="T:Coderr.Client.ContextProviders.CurrentUserProvider">
            <summary>
                Adds the logged in user (using <c>Thread.CurrentPrincipal</c>).
            </summary>
        </member>
        <member name="P:Coderr.Client.ContextProviders.CurrentUserProvider.Name">
            <summary>
                Returns <c>"CurrentUser"</c>
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.CurrentUserProvider.Collect(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Collects the identity name.
            </summary>
            <param name="context">Context collection</param>
            <returns>Generated collection</returns>
        </member>
        <member name="T:Coderr.Client.ContextProviders.DefaultProviderAttribute">
            <summary>
                Use to indicate which providers are added into the collection process per default
            </summary>
        </member>
        <member name="T:Coderr.Client.ContextProviders.DiskDriveProvider">
            <summary>
                Collects information about all disks in the computer. Will be added into a collection called <c>DiskDrives</c>.
            </summary>
        </member>
        <member name="P:Coderr.Client.ContextProviders.DiskDriveProvider.Name">
            <summary>
                Gets "DiskDrives"
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.DiskDriveProvider.Collect(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
                Collection
            </returns>
        </member>
        <member name="T:Coderr.Client.ContextProviders.ExceptionPropertiesProvider">
            <summary>
                Goes through the exception and maps all custom properties. Will be added into a collection called
                <c>ExceptionProperties</c>.
            </summary>
        </member>
        <member name="P:Coderr.Client.ContextProviders.ExceptionPropertiesProvider.Name">
            <summary>
                Returns "ExceptionProperties"
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.ExceptionPropertiesProvider.Collect(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
                Collection. Items with multiple values are joined using <c>";;"</c>
            </returns>
        </member>
        <member name="T:Coderr.Client.ContextProviders.FileVersionProvider">
            <summary>
                File versions for all loaded assemblies (can be different than the assembly version).
            </summary>
            <remarks>
                <para>Collection name is "FileVersions"</para>
            </remarks>
        </member>
        <member name="F:Coderr.Client.ContextProviders.FileVersionProvider.NAME">
            <summary>
                "FileVersions"
            </summary>
        </member>
        <member name="P:Coderr.Client.ContextProviders.FileVersionProvider.Name">
            <summary>
                Name of the collection that this provider adds.
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.FileVersionProvider.Collect(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
                Collection. Items with multiple values are joined using <c>";;"</c>
            </returns>
        </member>
        <member name="T:Coderr.Client.ContextProviders.Helpers.ManagementCollector">
            <summary>
                Collector used to fetch information from the windows management API
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.Helpers.ManagementCollector.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.ContextProviders.Helpers.ManagementCollector" /> class.
            </summary>
            <param name="collection">Collection to fill with context information.</param>
            <exception cref="T:System.ArgumentNullException">collection</exception>
        </member>
        <member name="P:Coderr.Client.ContextProviders.Helpers.ManagementCollector.Filter">
            <summary>
                Filter out the specified names (if any).
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.Helpers.ManagementCollector.Collect(System.String)">
            <summary>
                Collects the specified name.
            </summary>
            <param name="name">Management object table.</param>
        </member>
        <member name="T:Coderr.Client.ContextProviders.IContextInfoProvider">
            <summary>
                Collects information from a specific part of the system
            </summary>
        </member>
        <member name="P:Coderr.Client.ContextProviders.IContextInfoProvider.Name">
            <summary>
                Name of the collection that this provider adds.
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.IContextInfoProvider.Collect(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>Collection. Items with multiple values are joined using <c>";;"</c></returns>
        </member>
        <member name="T:Coderr.Client.ContextProviders.NamespaceDoc">
            <summary>
                Context providers are used to collect additional information that can aid you in solving the error.
            </summary>
            <remarks>
                <para>
                    Used providers are mananaged through <see cref="T:Coderr.Client.ContextProviders.ContextProvidersRegistrar" />.
                </para>
            </remarks>
        </member>
        <member name="T:Coderr.Client.ContextProviders.OperatingSystemProvider">
            <summary>
                Collects information about the operating system like version and service pack info. Will be added to a collection
                called <c>OperatingSystem</c>.
            </summary>
        </member>
        <member name="F:Coderr.Client.ContextProviders.OperatingSystemProvider.FilteredFields">
            <summary>
                Fields that will not be included.
            </summary>
            <remarks>
                <para>Default filter is <code> "CSName", "RegisteredUser", "SerialNumber"</code> </para>
            </remarks>
        </member>
        <member name="P:Coderr.Client.ContextProviders.OperatingSystemProvider.Name">
            <summary>
                Gets "OperatingSystem"
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.OperatingSystemProvider.Collect(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
                Collection. Items with multiple values are joined using <c>";;"</c>
            </returns>
        </member>
        <member name="T:Coderr.Client.ContextProviders.ProcessorProvider">
            <summary>
                Collects information about the CPU. Will be added to a collection called <c>Processor</c>.
            </summary>
        </member>
        <member name="P:Coderr.Client.ContextProviders.ProcessorProvider.Name">
            <summary>
                Gets "Processor"
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.ProcessorProvider.Collect(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
                Collection
            </returns>
        </member>
        <member name="T:Coderr.Client.ContextProviders.StartupCommandsProvider">
            <summary>
                Loads information about all applications which start during system startup. Will be added to a collection called
                <c>StartupCommands</c>.
            </summary>
        </member>
        <member name="P:Coderr.Client.ContextProviders.StartupCommandsProvider.Name">
            <summary>
                Gets "StartupCommands"
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.StartupCommandsProvider.Collect(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
                Collection
            </returns>
        </member>
        <member name="T:Coderr.Client.ContextProviders.SystemDevicesProvider">
            <summary>
                Loads information about all system devices. Will be added to a collection called <c>SystemDevices</c>.
            </summary>
        </member>
        <member name="P:Coderr.Client.ContextProviders.SystemDevicesProvider.Name">
            <summary>
                Gets "SystemDevices"
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.SystemDevicesProvider.Collect(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
                Collection
            </returns>
        </member>
        <member name="T:Coderr.Client.ContextProviders.SystemInfoProvider">
            <summary>
                Collects information about the computer (such as motherboard information). Will be added to a collection called
                <c>SystemInfo</c>.
            </summary>
            <remarks>
                <para>
                    Some fields are filtered out per default, look at the <see cref="F:Coderr.Client.ContextProviders.SystemInfoProvider.Filter" /> property.
                </para>
            </remarks>
        </member>
        <member name="F:Coderr.Client.ContextProviders.SystemInfoProvider.Filter">
            <summary>
                Fields which will be excluded.
            </summary>
            <remarks>
                <para>
                    Default is <c>"Caption", "DnsHostName", "Domain", "Name", "PrimaryOwnerName", "UserName", "Workgroup"</c>
                </para>
            </remarks>
        </member>
        <member name="P:Coderr.Client.ContextProviders.SystemInfoProvider.Name">
            <summary>
                Gets "SystemInfo"
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.SystemInfoProvider.Collect(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Collect information
            </summary>
            <param name="context">Contains information about the currently processed exception and where it came from.</param>
            <returns>
                Collection
            </returns>
        </member>
        <member name="T:Coderr.Client.ContextProviders.ThreadContextInfo">
            <summary>
                Collects information from <c>Thread.CurrentThread</c> to a context called "Thread".
            </summary>
        </member>
        <member name="F:Coderr.Client.ContextProviders.ThreadContextInfo.NAME">
            <summary>
                "Thread"
            </summary>
        </member>
        <member name="P:Coderr.Client.ContextProviders.ThreadContextInfo.Name">
            <summary>
                "Thread"
            </summary>
        </member>
        <member name="M:Coderr.Client.ContextProviders.ThreadContextInfo.Collect(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Collects information from <c>Thread.CurrentThread</c> to a context called "Thread".
            </summary>
            <param name="context">Contains information about the currently processed exception and where it came from.</param>
            <returns>generated context info</returns>
        </member>
        <member name="T:Coderr.Client.Contracts.ContextCollectionDTO">
            <summary>
                DTO for a context collection
            </summary>
        </member>
        <member name="M:Coderr.Client.Contracts.ContextCollectionDTO.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.Contracts.ContextCollectionDTO" /> class.
            </summary>
            <param name="name">Collection name (will be shown in the web site).</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:Coderr.Client.Contracts.ContextCollectionDTO.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.Contracts.ContextCollectionDTO" /> class.
            </summary>
            <param name="name">Collection name (will be shown in the web site).</param>
            <param name="items">All Properties in this collection.</param>
            <exception cref="T:System.ArgumentNullException">
                name
                or
                Properties
            </exception>
        </member>
        <member name="M:Coderr.Client.Contracts.ContextCollectionDTO.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.Contracts.ContextCollectionDTO" /> class.
            </summary>
            <param name="name">Collection name (will be shown in the web site).</param>
            <param name="properties">All Properties in this collection.</param>
            <exception cref="T:System.ArgumentNullException">
                name
                or
                Properties
            </exception>
        </member>
        <member name="M:Coderr.Client.Contracts.ContextCollectionDTO.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.Contracts.ContextCollectionDTO" /> class.
            </summary>
            <param name="name">Collection name (will be shown in the web site).</param>
            <param name="properties">All Properties in this collection.</param>
            <exception cref="T:System.ArgumentNullException">
                name
                or
                Properties
            </exception>
        </member>
        <member name="P:Coderr.Client.Contracts.ContextCollectionDTO.Name">
            <summary>
                Gets name of this collection (shown for the user so that he/she can identify this collection)
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ContextCollectionDTO.Properties">
            <summary>
                All Properties in the collection
            </summary>
        </member>
        <member name="M:Coderr.Client.Contracts.ContextCollectionDTO.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Coderr.Client.Contracts.ErrorReportDTO">
            <summary>
                DTO used to transfer the report from the applications to the server.
            </summary>
        </member>
        <member name="M:Coderr.Client.Contracts.ErrorReportDTO.#ctor(System.String,Coderr.Client.Contracts.ExceptionDTO,Coderr.Client.Contracts.ContextCollectionDTO[])">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.Contracts.ErrorReportDTO" /> class.
            </summary>
            <param name="reportId">Unique identifier for this error report.</param>
            <param name="exception">The exception.</param>
            <param name="contextCollections">The context collections.</param>
        </member>
        <member name="M:Coderr.Client.Contracts.ErrorReportDTO.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.Contracts.ErrorReportDTO" /> class.
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ErrorReportDTO.ContextCollections">
            <summary>
                A collection of context information such as HTTP request information or computer hardware info.
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ErrorReportDTO.CreatedAtUtc">
            <summary>
                To get exact date
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ErrorReportDTO.Exception">
            <summary>
                Exception which was caught.
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ErrorReportDTO.ReportId">
            <summary>
                Gets report id (unique identifier used in communication with the customer to identify this error)
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ErrorReportDTO.ReportVersion">
            <summary>
                Version of the report API
            </summary>
            <example>
                1.0
            </example>
        </member>
        <member name="P:Coderr.Client.Contracts.ErrorReportDTO.IncidentId">
            <summary>
                For backwards compatibility
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ErrorReportDTO.Environment">
            <summary>
            Environment that the error was detected in (dev, test, prod)
            </summary>
        </member>
        <member name="M:Coderr.Client.Contracts.ErrorReportDTO.Add(Coderr.Client.Contracts.ContextCollectionDTO)">
            <summary>
                Add an collection to the model
            </summary>
            <param name="collection">Collection of contextual information which can be used to aid in solving the error.</param>
            <exception cref="T:System.ArgumentNullException">collection</exception>
        </member>
        <member name="M:Coderr.Client.Contracts.ErrorReportDTO.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Coderr.Client.Contracts.ExceptionDTO">
            <summary>
                Model used to wrap all information from an exception.
            </summary>
        </member>
        <member name="M:Coderr.Client.Contracts.ExceptionDTO.#ctor(System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.Contracts.ExceptionDTO" /> class.
            </summary>
            <param name="exception">The exception.</param>
            <exception cref="T:System.ArgumentNullException">exception</exception>
        </member>
        <member name="M:Coderr.Client.Contracts.ExceptionDTO.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.Contracts.ExceptionDTO" /> class.
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ExceptionDTO.AssemblyName">
            <summary>
                Assembly name (version included)
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ExceptionDTO.BaseClasses">
            <summary>
                Exception base classes. Most specific first: <c>ArgumentOutOfRangeException</c>, <c>ArgumentException</c>,
                <c>Exception</c>.
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ExceptionDTO.Everything">
            <summary>
                Everything (<c>exception.ToString()</c>)
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ExceptionDTO.FullName">
            <summary>
                Full type name (namespace + class name)
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ExceptionDTO.InnerException">
            <summary>
                Inner exception (if any; otherwise <c>null</c>).
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ExceptionDTO.Message">
            <summary>
                Exception message
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ExceptionDTO.Name">
            <summary>
                Type name
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ExceptionDTO.Namespace">
            <summary>
                Namespace that the exception is in
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ExceptionDTO.Properties">
            <summary>
                All properties (public and private)
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.ExceptionDTO.StackTrace">
            <summary>
                Stack trace, line numbers included if your app also distributes the PDB files.
            </summary>
        </member>
        <member name="M:Coderr.Client.Contracts.ExceptionDTO.Copy(System.Exception,Coderr.Client.Contracts.ExceptionDTO)">
            <summary>
                Copy the .NET exception information into our DTO.
            </summary>
            <param name="source">Exception to copy from</param>
            <param name="destination">Model to put the information in.</param>
        </member>
        <member name="M:Coderr.Client.Contracts.ExceptionDTO.GetProperties(System.Exception)">
            <summary>
                Get all properties from an exception (public and non public).
            </summary>
            <param name="exception">Exception to scan.</param>
            <returns>Properties</returns>
        </member>
        <member name="T:Coderr.Client.Contracts.FeedbackDTO">
            <summary>
                To be able to write feedback after the actual error have been sent.
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.FeedbackDTO.Description">
            <summary>
                Description written by the user about what he/she did when the error occurred.
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.FeedbackDTO.EmailAddress">
            <summary>
                Email address to user (if he/she would like to get status updates)
            </summary>
        </member>
        <member name="P:Coderr.Client.Contracts.FeedbackDTO.ReportId">
            <summary>
                Id returned from <see cref="M:Coderr.Client.Processor.ReportIdGenerator.Generate(System.Exception)" /> (which is used when generating the error report).
            </summary>
        </member>
        <member name="T:Coderr.Client.Contracts.NamespaceDoc">
            <summary>
                The DTO's used to submit information to codeRR.
            </summary>
            <remarks>
                <para>
                    Everything is serialized to JSON and then DTO is then compressed using ZIP before being uploaded to
                    codeRR. The body
                    is signed using HMAC and the signature is provided as <c>sig</c> in the query string.
                </para>
            </remarks>
        </member>
        <member name="T:Coderr.Client.Converters.IncludeNonPublicMembersContractResolver">
            <summary>
                JSON.NET class which also includes all private fields.
            </summary>
        </member>
        <member name="T:Coderr.Client.Converters.NamespaceDoc">
            <summary>
                Serializers and converters.
            </summary>
        </member>
        <member name="T:Coderr.Client.Converters.ObjectToContextCollectionConverter">
            <summary>
                Converts an object into a context collection.
            </summary>
            <remarks>
                <para>
                    The following conversions are supported:
                </para>
                <list type="table">
                    <listheader>
                        <term>type</term>
                        <description>description</description>
                    </listheader>
                    <item>
                        <term>anonymous object</term>
                        <description>Collection will be named <c>CustomData</c>. All properties will be included</description>
                    </item>
                    <item>
                        <term>class</term>
                        <description>Collection will be named as the class. All properties will be included</description>
                    </item>
                    <item>
                        <term>
                            <see cref="T:Coderr.Client.Contracts.ContextCollectionDTO" />
                        </term>
                        <description>Collection is included directly</description>
                    </item>
                    <item>
                        <term>
                            <c>ContextCollectionDTO[]</c>
                        </term>
                        <description>All collections will be added as different ones (and not nested)</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Converters.ObjectToContextCollectionConverter.#ctor">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Client.Converters.ObjectToContextCollectionConverter" />.
            </summary>
        </member>
        <member name="P:Coderr.Client.Converters.ObjectToContextCollectionConverter.MaxPropertyCount">
            <summary>
                Maximum number of properties that can be added during the collection process.
            </summary>
            <value>
                Default is 10,000
            </value>
        </member>
        <member name="M:Coderr.Client.Converters.ObjectToContextCollectionConverter.Convert(System.String,System.Object)">
            <summary>
                Turn an object into a string which can be used for debugging.
            </summary>
            <param name="collectionName">
                Name of the collection that is being created. This name is displayed under "Similarities"
                and "Context info" in our UI.
            </param>
            <param name="instance">Object to get a string representation for</param>
            <returns>"null" if the object is null, otherwise an string as given per object sample</returns>
            <remarks>
                Look at the class doc for an example.
            </remarks>
        </member>
        <member name="M:Coderr.Client.Converters.ObjectToContextCollectionConverter.Convert(System.Object)">
            <summary>
                Turn an object into a string which can be used for debugging.
            </summary>
            <param name="instance">Object to get a string representation for</param>
            <returns>"null" if the object is null, otherwise an string as given per object sample</returns>
            <remarks>
                <para>
                    Collection name will be <c>ContextData</c> unless the object is a real type which is not a collection (in that
                    case the type name is used).
                </para>
                <para>Look at the class doc for an example.</para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Converters.ObjectToContextCollectionConverter.FilterProperties(System.Func{System.String,System.Object,System.Boolean})">
            <summary>
                Filter properties.
            </summary>
            <param name="propertyFilter">propertyName, propertyValue</param>
            <returns><c>true</c> if property should be filtered out; otherwise <c>false</c></returns>
        </member>
        <member name="M:Coderr.Client.Converters.ObjectToContextCollectionConverter.Ignore(System.String[])">
            <summary>
                Properties that should be ignored when the context collection is being built.
            </summary>
            <param name="properties">Case sensitive names</param>
        </member>
        <member name="M:Coderr.Client.Converters.ObjectToContextCollectionConverter.IsSimpleType(System.Type)">
            <summary>
                Checks if the specified type could be traversed or just added as a value.
            </summary>
            <param name="type">Type to check</param>
            <returns><c>true</c> if we should add this type as a value; <c>false</c> if we should do reflection on it.</returns>
        </member>
        <member name="M:Coderr.Client.Converters.ObjectToContextCollectionConverter.ReflectObject(System.Object,System.String,Coderr.Client.Contracts.ContextCollectionDTO,System.Collections.Generic.List{System.Object})">
            <summary>
                Use reflection on a complex object to add it's values to our context collection
            </summary>
            <param name="instance">Current object to reflect</param>
            <param name="prefix">Prefix, like "User.Address.Postal.ZipCode"</param>
            <param name="contextCollection">Collection that values should be added to.</param>
            <param name="path">To prevent circular references.</param>
        </member>
        <member name="M:Coderr.Client.Converters.ObjectToContextCollectionConverter.ReflectValue(System.String,System.Object,Coderr.Client.Contracts.ContextCollectionDTO,System.Collections.Generic.List{System.Object})">
            <summary>
                Use reflection on a complex object to add it's values to our context collection.
            </summary>
            <param name="propertyName">Property that this collection belongs to</param>
            <param name="value"></param>
            <param name="contextCollection">Collection that values should be added to.</param>
            <param name="path">To prevent circular references.</param>
        </member>
        <member name="T:Coderr.Client.Err">
            <summary>
                Main mother of all true things.
            </summary>
        </member>
        <member name="P:Coderr.Client.Err.Configuration">
            <summary>
                Access configuration options
            </summary>
        </member>
        <member name="M:Coderr.Client.Err.GenerateReport(System.Exception)">
            <summary>
                Will generate a report without uploading it.
            </summary>
            <param name="exception">Exception that you want to get reported</param>
            <returns>Report if it can be processed; otherwise <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">exception</exception>
            <remarks>
                <para>
                    A lot if context information is also included in the error report. You can configure the attached information
                    by
                    using <c>Err.Configuration.ContextProviders.Add()</c>
                </para>
                <para>
                    All library exceptions are directed to the <c>Err.ReportingFailed</c> event.
                    Subscribe on that event if you have trouble with reporting exceptions.
                </para>
            </remarks>
            <example>
                <code>
            public ActionResult Activate(UserViewModel model)
            {
            	if (!ModelState.IsValid)
            		return View(model);
            		
            	try
            	{
            		var user = _repos.GetUser(model.Id);
            		user.Activate(model.ActivationCode);
            		_repos.Save(user);
            		return RedirectToAction("Welcome");
            	}
            	catch (Exception exception)
            	{
            		Err.Report(exception);
            	}
            }
            </code>
            </example>
            <seealso cref="M:Coderr.Client.Err.UploadReport(Coderr.Client.Contracts.ErrorReportDTO)" />
        </member>
        <member name="M:Coderr.Client.Err.GenerateReport(System.Exception,System.Object)">
            <summary>
                Will generate a report without uploading it.
            </summary>
            <param name="exception">Exception that you want to get reported</param>
            <param name="contextData">
                Context specific information which would make it easier to reproduce and correct the
                exception. See <see cref="T:Coderr.Client.Converters.ObjectToContextCollectionConverter" /> to understand what kind of information you can
                attach.
            </param>
            <returns>Report if it can be processed; otherwise <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">exception</exception>
            <remarks>
                <para>
                    A lot if context information is also included in the error report. You can configure the attached information
                    by
                    using <c>Err.Configuration.ContextProviders.Add()</c>
                </para>
                <para>
                    All library exceptions are directed to the <c>Err.ReportingFailed</c> event.
                    Subscribe on that event if you have trouble with reporting exceptions.
                </para>
            </remarks>
            <example>
                <code>
            public ActionResult Activate(UserViewModel model)
            {
            	if (!ModelState.IsValid)
            		return View(model);
            		
            	try
            	{
            		var user = _repos.GetUser(model.Id);
            		user.Activate(model.ActivationCode);
            		_repos.Save(user);
            		return RedirectToAction("Welcome");
            	}
            	catch (Exception exception)
            	{
            		Err.Report(exception);
            	}
            }
            </code>
            </example>
            <seealso cref="M:Coderr.Client.Err.UploadReport(Coderr.Client.Contracts.ErrorReportDTO)" />
        </member>
        <member name="M:Coderr.Client.Err.GenerateReport(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Generate an error report
            </summary>
            <param name="context">context</param>
            <returns>Report if it can be processed; otherwise <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Coderr.Client.Err.LeaveFeedback(System.String,Coderr.Client.ContextCollections.UserSuppliedInformation)">
            <summary>
                A user have written information about what he/she did when the exception was thrown; or the user want to get
                information about the bug fixing progress (i.e. want to know when the error is corrected).
            </summary>
            <param name="errorId">Id generated by this library. Returned when you invoke <see cref="M:Coderr.Client.Err.Report(System.Exception)" />.</param>
            <param name="feedback">Information from the user.</param>
        </member>
        <member name="M:Coderr.Client.Err.Report(System.Exception)">
            <summary>
                Report an exception directly.
            </summary>
            <param name="exception">Exception that you want to get reported</param>
            <returns>Unique identifier for this report (generated using <see cref="T:Coderr.Client.Processor.ReportIdGenerator" />)</returns>
            <exception cref="T:System.ArgumentNullException">exception</exception>
            <remarks>
                <para>
                    A lot if context information is also included in the error report. You can configure the attached information
                    by
                    using <c>Err.Configuration.ContextProviders.Add()</c>
                </para>
                <para>
                    All library exceptions are directed to the <c>Err.ReportingFailed</c> event.
                    Subscribe on that event if you have trouble with reporting exceptions.
                </para>
            </remarks>
            <example>
                <code>
            public ActionResult Activate(UserViewModel model)
            {
            	if (!ModelState.IsValid)
            		return View(model);
            		
            	try
            	{
            		var user = _repos.GetUser(model.Id);
            		user.Activate(model.ActivationCode);
            		_repos.Save(user);
            		return RedirectToAction("Welcome");
            	}
            	catch (Exception exception)
            	{
            		Err.Report(exception);
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Coderr.Client.Err.Report(System.Exception,System.Object)">
            <summary>
                Report an exception directly.
            </summary>
            <param name="exception">Exception that you want to get reported</param>
            <param name="contextData">
                Context specific information which would make it easier to reproduce and correct the
                exception. See <see cref="T:Coderr.Client.Converters.ObjectToContextCollectionConverter" /> to understand what kind of information you can
                attach.
            </param>
            <returns>Unique identifier for this report (generated using <see cref="T:Coderr.Client.Processor.ReportIdGenerator" />)</returns>
            <exception cref="T:System.ArgumentNullException">exception</exception>
            <remarks>
                <para>
                    Context information will be collected and included in the error report. You can configure the attached
                    information
                    by
                    using <c>Err.Configuration.ContextProviders</c>
                </para>
                <para>
                    All library exceptions are directed to the <c>Err.ReportingFailed</c> event.
                    Subscribe on that event if you have trouble with reporting exceptions.
                </para>
            </remarks>
            <example>
                <code>
            public ActionResult Activate(UserViewModel model)
            {
            	if (!ModelState.IsValid)
            		return View(model);
            		
            	try
            	{
            		var user = _repos.GetUser(model.Id);
            		user.Activate(model.ActivationCode);
            		_repos.Save(user);
            		return RedirectToAction("Welcome");
            	}
            	catch (Exception exception)
            	{
            		Err.Report(exception, model);
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Coderr.Client.Err.ReportLogicError(System.String,System.Object,System.String)">
            <summary>
                Report a logical error to Coderr.
            </summary>
            <param name="errorMessage">Explains the error (the reason to why you reported it)</param>
            <param name="contextData">
                Context information. Either an array of <see cref="T:Coderr.Client.Contracts.ContextCollectionDTO" /> objects or a
                single object (like a view model)
            </param>
            <param name="errorId">
                Define your own unique identifier for this error. The message + the calling message are otherwise
                used to generate an hash identifier for this method
            </param>
            <remarks>
                <para>
                    Logical errors are bugs where you expected a specific state in your application whole you received something
                    else. Your method can still continue and deliver the expected result. However, it can lead
                    to other bugs in the future so you still want to bring it to attention.
                </para>
                <para>
                    Logical errors are reported to Coderr with the tag "logical-error" so that you can easily find them. If you are
                    using Coderr they also recieve a lower priority by the prioritization feature.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Err.UploadReport(Coderr.Client.Contracts.ErrorReportDTO)">
            <summary>
                Upload an error report.
            </summary>
            <param name="dto">Typically generated by <see cref="M:Coderr.Client.Err.GenerateReport(System.Exception)" />.</param>
        </member>
        <member name="P:Coderr.Client.LogicalErrorException.ErrorHashSource">
            <summary>
                Used to identify this error.
            </summary>
        </member>
        <member name="P:Coderr.Client.LogicalErrorException.StackTrace">
            <summary>Gets a string representation of the immediate frames on the call stack.</summary>
            <returns>A string that describes the immediate frames of the call stack.</returns>
            <filterpriority>2</filterpriority>
            <PermissionSet>
                <IPermission
                    class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" PathDiscovery="*AllFiles*" />
            </PermissionSet>
        </member>
        <member name="T:Coderr.Client.NamespaceDoc">
            <summary>
                <para>
                    Welcome to the reporting library for codeRR. Read below the class list for more information about the
                    library.
                </para>
                <para>
                    This library is configured by using the <see cref="T:Coderr.Client.Err" /> class. A minimal setup contains a single line:
                </para>
                <code>
            Err.Credentials("appKey", "sharedSecret");
            //report 
            </code>
                <para>
                    The appKey/sharedSecret can be found in our web once you have created an account: https://coderrapp.com. The
                    above
                    line will not detect any exceptions automatically, you have to report each exception by yourself:
                </para>
                <code>
            try
            {
                //some business
            }
            catch (Exception ex)
            {
                Err.Report(ex);
            }
            </code>
                <para>
                    You can also include own context information by specifying a second argument:
                </para>
                <code>
            try
            {
                //some business
            }
            catch (Exception ex)
            {
                Err.Report(ex, yourDbEntity);
            }
            </code>
                <para>
                    You can read more about reporting in the <see cref="T:Coderr.Client.Err" /> documentation.
                </para>
                <para>
                    If you are interested in providing your own context information automatically you should start by reading
                    the <see cref="N:Coderr.Client.ContextProviders" /> namespace and then add your own provider by using
                    <c>Err.Configuration.ContextProviders.Add()</c>.
                </para>
            </summary>
            <seealso cref="T:Coderr.Client.Err" />
            <seealso cref="!:ErrConfiguration" />
        </member>
        <member name="T:Coderr.Client.ObjectExtensions">
            <summary>
                Extension methods for objects.
            </summary>
        </member>
        <member name="M:Coderr.Client.ObjectExtensions.IsAnonymousType(System.Type)">
            <summary>
                Determines whether the given type is an anonymous object.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if type is anonymous; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Coderr.Client.ObjectExtensions.ToContextCollection(System.Object)">
            <summary>
                Converts simple objects into context collections
            </summary>
            <param name="instance">Object to convert</param>
            <returns>Context information</returns>
            <remarks>
                Anonymous types get the collection name "CustomData" while any other class get the class name as collection name.
            </remarks>
        </member>
        <member name="M:Coderr.Client.ObjectExtensions.ToContextCollection(System.Object,System.String)">
            <summary>
                Converts simple objects into context collections
            </summary>
            <param name="instance">Object to convert</param>
            <param name="name">Name to assign to the context collection</param>
            <returns>Context information</returns>
            <remarks>
                Anonymous types get the collection name "CustomData" while any other class get the class name as collection name.
            </remarks>
        </member>
        <member name="T:Coderr.Client.Processor.ExceptionProcessor">
            <summary>
                Will process the exception to generate context info and then upload it to the server.
            </summary>
        </member>
        <member name="M:Coderr.Client.Processor.ExceptionProcessor.#ctor(Coderr.Client.Config.CoderrConfiguration)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Client.Processor.ExceptionProcessor" />.
            </summary>
            <param name="configuration">Current configuration.</param>
        </member>
        <member name="M:Coderr.Client.Processor.ExceptionProcessor.Build(System.Exception)">
            <summary>
                Build an report, but do not upload it
            </summary>
            <param name="exception">caught exception</param>
            <returns>Report if it can be processed; otherwise <c>null</c>.</returns>
            <remarks>
                <para>
                    Will collect context info and generate a report.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Processor.ExceptionProcessor.Build(System.Exception,System.Object)">
            <summary>
                Build an report, but do not upload it
            </summary>
            <param name="exception">caught exception</param>
            <param name="contextData">context data</param>
            <remarks>
                <para>
                    Will collect context info and generate a report.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Processor.ExceptionProcessor.Build(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Process exception.
            </summary>
            <param name="context">
                Used to reports (like for ASP.NET) can attach information which can be used during the context
                collection pipeline.
            </param>
            <remarks>
                <para>
                    Will collect context info, generate a report, go through filters and finally upload it.
                </para>
            </remarks>
            <returns>
                Report if filter allowed the generated report; otherwise <c>null</c>.
            </returns>
            <seealso cref="T:Coderr.Client.Processor.IReportFilter" />
        </member>
        <member name="M:Coderr.Client.Processor.ExceptionProcessor.Process(System.Exception)">
            <summary>
                Process exception.
            </summary>
            <param name="exception">caught exception</param>
            <remarks>
                <para>
                    Will collect context info, generate a report, go through filters and finally upload it.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Processor.ExceptionProcessor.Process(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Process exception.
            </summary>
            <param name="context">
                Used to reports (like for ASP.NET) can attach information which can be used during the context
                collection pipeline.
            </param>
            <remarks>
                <para>
                    Will collect context info, generate a report, go through filters and finally upload it.
                </para>
            </remarks>
            <returns>
                Report if filter allowed the generated report; otherwise <c>null</c>.
            </returns>
            <seealso cref="T:Coderr.Client.Processor.IReportFilter" />
        </member>
        <member name="M:Coderr.Client.Processor.ExceptionProcessor.Process(System.Exception,System.Object)">
            <summary>
                Process exception.
            </summary>
            <param name="exception">caught exception</param>
            <param name="contextData">Context data</param>
            <remarks>
                <para>
                    Will collect context info, generate a report, go through filters and finally upload it.
                </para>
            </remarks>
        </member>
        <member name="T:Coderr.Client.Processor.IExceptionProcessor">
            <summary>
            Runs the codeRR client pipeline
            </summary>
        </member>
        <member name="M:Coderr.Client.Processor.IExceptionProcessor.Build(System.Exception)">
            <summary>
                Build an report, but do not upload it
            </summary>
            <param name="exception">caught exception</param>
            <returns>Report if it can be processed; otherwise <c>null</c>.</returns>
            <remarks>
                <para>
                    Will collect context info and generate a report.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Processor.IExceptionProcessor.Build(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Build an report, but do not upload it
            </summary>
            <param name="context">Error reporter context</param>
            <returns>Report if it can be processed; otherwise <c>null</c>.</returns>
            <remarks>
                <para>
                    Will collect context info and generate a report.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Processor.IExceptionProcessor.Build(System.Exception,System.Object)">
            <summary>
                Build an report, but do not upload it
            </summary>
            <param name="exception">caught exception</param>
            <param name="contextData">context data</param>
            <remarks>
                <para>
                    Will collect context info and generate a report.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Processor.IExceptionProcessor.Process(System.Exception)">
            <summary>
                Process exception.
            </summary>
            <param name="exception">caught exception</param>
            <remarks>
                <para>
                    Will collect context info, generate a report, go through filters and finally upload it.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Processor.IExceptionProcessor.Process(Coderr.Client.Reporters.IErrorReporterContext)">
            <summary>
                Process exception.
            </summary>
            <param name="context">
                Used to reports (like for ASP.NET) can attach information which can be used during the context
                collection pipeline.
            </param>
            <remarks>
                <para>
                    Will collect context info, generate a report, go through filters and finally upload it.
                </para>
            </remarks>
            <returns>
                Report if filter allowed the generated report; otherwise <c>null</c>.
            </returns>
            <seealso cref="T:Coderr.Client.Processor.IReportFilter" />
        </member>
        <member name="M:Coderr.Client.Processor.IExceptionProcessor.Process(System.Exception,System.Object)">
            <summary>
                Process exception.
            </summary>
            <param name="exception">caught exception</param>
            <param name="contextData">Context data</param>
            <remarks>
                <para>
                    Will collect context info, generate a report, go through filters and finally upload it.
                </para>
            </remarks>
        </member>
        <member name="T:Coderr.Client.Processor.IReportFilter">
            <summary>
                Invoked for every report that is about to be uploaded.
            </summary>
            <remarks>
                Register the filter using <c>Err.Configuration.FilterCollection.</c>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Processor.IReportFilter.Invoke(Coderr.Client.Processor.ReportFilterContext)">
            <summary>
                Filter method.
            </summary>
            <param name="context">Exception context information</param>
            <remarks>
                <para>
                    Set <c>ReportFilterContext.CanSubmitReport</c> to <c>false</c> to abort upload.
                </para>
            </remarks>
        </member>
        <member name="T:Coderr.Client.Processor.NamespaceDoc">
            <summary>
                Contains the processor which analyzes the exception and builds context information.
            </summary>
        </member>
        <member name="T:Coderr.Client.Processor.ReportFilterContext">
            <summary>
                Used when invoking all <see cref="T:Coderr.Client.Processor.IReportFilter" /> to determine if the current report may be sent to the
                submitters.
            </summary>
            <seealso cref="N:Coderr.Client.Uploaders" />
        </member>
        <member name="M:Coderr.Client.Processor.ReportFilterContext.#ctor(Coderr.Client.Contracts.ErrorReportDTO)">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.Processor.ReportFilterContext" /> class.
            </summary>
            <param name="report">The report.</param>
            <exception cref="T:System.ArgumentNullException">report</exception>
        </member>
        <member name="P:Coderr.Client.Processor.ReportFilterContext.CanSubmitReport">
            <summary>
                True if we may submit the report
            </summary>
            <value>Default is true</value>
        </member>
        <member name="P:Coderr.Client.Processor.ReportFilterContext.Report">
            <summary>
                Created report
            </summary>
        </member>
        <member name="T:Coderr.Client.Processor.ReportFilterDispatcher">
            <summary>
                Purpose of this class is to invoke all callbacks to see if any of them objects to uploading this report.
            </summary>
        </member>
        <member name="M:Coderr.Client.Processor.ReportFilterDispatcher.Add(Coderr.Client.Processor.IReportFilter)">
            <summary>
                Add a filter to the collection
            </summary>
            <param name="filter">Filter</param>
        </member>
        <member name="M:Coderr.Client.Processor.ReportFilterDispatcher.CanUploadReport(Coderr.Client.Contracts.ErrorReportDTO)">
            <summary>
                Invoke callbacks
            </summary>
            <param name="dto">Report to be uploaded.</param>
            <returns><c>false</c> if any of the callbacks return <c>false</c>; otherwise <c>true</c></returns>
            <remarks>
                <para>
                    All callbacks will be invoked, even if one of them returns <c>false</c>.
                </para>
            </remarks>
        </member>
        <member name="T:Coderr.Client.Processor.ReportIdGenerator">
            <summary>
                Used to be able to choose reportId id strategy
            </summary>
            <remarks>
                <para>
                    The reportId id is the string which are used during communication between the end customers and the codeRR
                    customers.
                </para>
                <para>
                    The default implementation Base64 encodes a guid (the last "--" is removed from the Base64 string,"/" is
                    replaced with "_" and "+" is replaced with "-".
                </para>
                <para>
                    The ID must be globally unique (or at least within your own application scope).
                </para>
            </remarks>
            <seealso cref="T:Coderr.Client.Processor.ShortGuid" />
        </member>
        <member name="M:Coderr.Client.Processor.ReportIdGenerator.Assign(System.Func{System.Exception,System.String})">
            <summary>
                Assign a custom ID generator.
            </summary>
            <param name="generator">The generator.</param>
            <exception cref="T:System.ArgumentNullException">generator</exception>
        </member>
        <member name="M:Coderr.Client.Processor.ReportIdGenerator.Generate(System.Exception)">
            <summary>
                Generate a new ID
            </summary>
            <param name="exception">Exception to get an reportId for</param>
            <returns>reportId</returns>
            <exception cref="T:System.ArgumentNullException">exception</exception>
        </member>
        <member name="T:Coderr.Client.Processor.ShortGuid">
            <summary>
                Shortens GUIDs using Base64 and convert the result to a URL friendly string.
            </summary>
        </member>
        <member name="M:Coderr.Client.Processor.ShortGuid.Decode(System.String)">
            <summary>
                Get a short GUID as a Guid object.
            </summary>
            <param name="shortGuid">The short GUID.</param>
            <returns>Restored GUID</returns>
            <exception cref="T:System.ArgumentNullException">shortGuid</exception>
            <exception cref="T:System.FormatException">Input string was not in a correct format.</exception>
        </member>
        <member name="M:Coderr.Client.Processor.ShortGuid.Encode(System.Guid)">
            <summary>
                Creates a 22-character case-sensitive short GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns>Compacted representation of the GUID</returns>
            <exception cref="T:System.ArgumentNullException">guid</exception>
        </member>
        <member name="T:Coderr.Client.Reporters.ErrorReporterContext">
            <summary>
                Context supplied by error reports
            </summary>
            <remarks>
                Used to be able to provide application specific context information (for instance HTTP applications can provide the HTTP
                context)
            </remarks>
        </member>
        <member name="M:Coderr.Client.Reporters.ErrorReporterContext.#ctor(System.Object,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.Reporters.ErrorReporterContext" /> class.
            </summary>
            <param name="reporter">The reporter.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Coderr.Client.Reporters.ErrorReporterContext.Reporter">
            <summary>
                Gets class which is sending the report
            </summary>
        </member>
        <member name="P:Coderr.Client.Reporters.ErrorReporterContext.Exception">
            <summary>
                Gets caught exception
            </summary>
        </member>
        <member name="P:Coderr.Client.Reporters.ErrorReporterContext.ContextCollections">
            <inheritdoc />
        </member>
        <member name="M:Coderr.Client.Reporters.ErrorReporterContext.MoveCollectionsInException(System.Exception,System.Collections.Generic.IList{Coderr.Client.Contracts.ContextCollectionDTO})">
            <summary>
                Can be used to copy collections from an exception to a collection collection ;)
            </summary>
            <param name="exception">Exception that might contain collections</param>
            <param name="destination">target</param>
        </member>
        <member name="T:Coderr.Client.Reporters.IErrorReporterContext">
            <summary>
                contains context information which can be used during collection such as <c>HttpContext</c> (if the exception was
                thrown during a HTTP request)
            </summary>
        </member>
        <member name="P:Coderr.Client.Reporters.IErrorReporterContext.Exception">
            <summary>
                Exception which was caused the error.
            </summary>
        </member>
        <member name="P:Coderr.Client.Reporters.IErrorReporterContext.Reporter">
            <summary>
                Gets class which is sending the report ( so that we know which part of the system that caught the exception)
            </summary>
        </member>
        <member name="T:Coderr.Client.Reporters.IErrorReporterContext2">
            <summary>
            To be able to add context collections directly
            </summary>
        </member>
        <member name="P:Coderr.Client.Reporters.IErrorReporterContext2.ContextCollections">
            <summary>
                All collections which have been added so far.
            </summary>
        </member>
        <member name="T:Coderr.Client.Reporters.NamespaceDoc">
            <summary>
                Reporters are the classes that detects unhandled exception and put them into the
                codeRR pipeline.
            </summary>
        </member>
        <member name="T:Coderr.Client.Uploaders.InvalidApplicationKeyException">
            <summary>
                Thrown when the server did not find our application key
            </summary>
            <remarks>
                <para>
                    You can catch this exception using the <c>Err.Configuration.Advanced.ReportingFailed</c> event.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Uploaders.InvalidApplicationKeyException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.Uploaders.InvalidApplicationKeyException" /> class.
            </summary>
            <param name="errMsg">The error MSG.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Coderr.Client.Uploaders.IReportUploader">
            <summary>
                Defines the contract for all classes that will send the error report to a specific destination.
            </summary>
            <seealso cref="T:Coderr.Client.Uploaders.UploadToCoderr" />
            <remarks>
                <para>
                    This contract gives a best effort promsie. i.e. it only promises to deliver the DTOs as soon as possible, but
                    reports
                    might be trashed if retried a certain amount of times or during a certain period of time. The
                    <c>UploadFailed</c>
                    event MUST be invoked by implementations when DTOs are thrown away.
                </para>
            </remarks>
        </member>
        <member name="E:Coderr.Client.Uploaders.IReportUploader.UploadFailed">
            <summary>
                Have given up the attempt to deliver a report.
            </summary>
            <remarks>
                The reason is implementation specific but is typically configured using a set of properties.
            </remarks>
        </member>
        <member name="M:Coderr.Client.Uploaders.IReportUploader.UploadFeedback(Coderr.Client.Contracts.FeedbackDTO)">
            <summary>
                Send feedback for a previously submitted error report
            </summary>
            <param name="feedback">Feedback to send</param>
        </member>
        <member name="M:Coderr.Client.Uploaders.IReportUploader.UploadReport(Coderr.Client.Contracts.ErrorReportDTO)">
            <summary>
                Upload report
            </summary>
            <param name="report">Error report that should be uploaded to the service</param>
        </member>
        <member name="T:Coderr.Client.Uploaders.NamespaceDoc">
            <summary>
                Submitters are the classes which takes error reports and delivers them to a specific destination. The destination
                itself
                can be anything from an local log file to a web service.
            </summary>
            <remarks>
                <para>
                    The codeRR reporter is defined as <see cref="T:Coderr.Client.Uploaders.UploadToCoderr" />.
                </para>
                <para>
                    This library will enqueue every error report for each submitter and also persist the queue. It that way the
                    library can continue to upload error
                    reports to every submitter even if the application crashes.
                </para>
            </remarks>
        </member>
        <member name="T:Coderr.Client.Uploaders.TempData">
            <summary>
                <para>
                    Temp data is used to store reports in memory for at most 20 minutes.
                </para>
                <para>
                    The purpose is
                    to be able to keep data for instance in web applications where different http requests is
                    required to collect information.
                </para>
            </summary>
        </member>
        <member name="M:Coderr.Client.Uploaders.TempData.#ctor">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Client.Uploaders.TempData" />.
            </summary>
        </member>
        <member name="P:Coderr.Client.Uploaders.TempData.Item(System.String)">
            <summary>
                Access an item (items are automatically deleted when retrieved)
            </summary>
            <param name="id">Identifier</param>
            <returns>Item or <c>null</c></returns>
        </member>
        <member name="M:Coderr.Client.Uploaders.TempData.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Coderr.Client.Uploaders.TempData.Dispose(System.Boolean)">
            <summary>
                Dispose pattern.
            </summary>
            <param name="isDisposing">Invoked from Dispose() method.</param>
        </member>
        <member name="T:Coderr.Client.Uploaders.UploadDispatcher">
            <summary>
                Invokes all uploaders for every report.
            </summary>
            <remarks>
                <para>
                    This class uses the <see cref="P:Coderr.Client.Config.CoderrConfiguration.QueueReports" /> to determine if uploads should be done in
                    the background (i.e. don't fail on errors, attempt again late).
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadDispatcher.#ctor(Coderr.Client.Config.CoderrConfiguration)">
            <summary>
                Creates a new instance of <see cref="T:Coderr.Client.Uploaders.UploadDispatcher" />.
            </summary>
            <param name="configuration">Used to check at runtime of queuing is enabled or not.</param>
        </member>
        <member name="P:Coderr.Client.Uploaders.UploadDispatcher.MaxQueueSize">
            <summary>
                Max number of items that may wait in queue to get uploaded.
            </summary>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadDispatcher.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadDispatcher.Register(Coderr.Client.Uploaders.IReportUploader)">
            <summary>
                Register an uploader.
            </summary>
            <param name="uploader">uploader</param>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadDispatcher.Upload(Coderr.Client.Contracts.ErrorReportDTO)">
            <summary>
                Invoke callbacks
            </summary>
            <param name="dto">Report to be uploaded.</param>
            <returns><c>false</c> if any of the callbacks return <c>false</c>; otherwise <c>true</c></returns>
            <remarks>
                <para>
                    All callbacks will be invoked, even if one of them returns <c>false</c>.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadDispatcher.Upload(Coderr.Client.Contracts.FeedbackDTO)">
            <summary>
                Upload feedback.
            </summary>
            <param name="dto">Feedback provided  by the user.</param>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadDispatcher.Dispose(System.Boolean)">
            <summary>
                Dispose pattern
            </summary>
            <param name="isDisposing">Invoked from the dispose method.</param>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadDispatcher.First">
            <summary>
                For tests
            </summary>
            <returns></returns>
        </member>
        <member name="E:Coderr.Client.Uploaders.UploadDispatcher.UploadFailed">
            <summary>
                Have given up the attempt to deliver a report.
            </summary>
            <remarks>
                The reason is implementation specific but is typically configured using a set of properties.
            </remarks>
        </member>
        <member name="T:Coderr.Client.Uploaders.UploadFailedException">
            <summary>
                Failed to upload an error report.
            </summary>
        </member>
        <member name="T:Coderr.Client.Uploaders.UploadQueue`1">
            <summary>
                Purpose of this class is to take care of DTO queing to be able to upload reports in a structured manner.
            </summary>
            <typeparam name="T">Type of entity to queue</typeparam>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadQueue`1.#ctor(System.Action{`0})">
            <summary>
                Create a new instance of <see cref="T:Coderr.Client.Uploaders.UploadQueue`1" />.
            </summary>
            <param name="uploadAction">
                Action to invoke for the DTO that should be uploaded. Thrown exceptions are used to indicate
                that a retry should be made.
            </param>
        </member>
        <member name="P:Coderr.Client.Uploaders.UploadQueue`1.MaxAttempts">
            <summary>
                Max number of upload attempts per report.
            </summary>
            <value>Default is 3.</value>
        </member>
        <member name="P:Coderr.Client.Uploaders.UploadQueue`1.MaxQueueSize">
            <summary>
                Max number of items that may wait in queue to get uploaded.
            </summary>
            <value>
                Default is 10.
            </value>
        </member>
        <member name="P:Coderr.Client.Uploaders.UploadQueue`1.PreConditionAction">
            <summary>
                An action to run in the background thread to check whether an upload can be made.
            </summary>
            <remarks>
                Typically used to check for connectivity.
            </remarks>
        </member>
        <member name="P:Coderr.Client.Uploaders.UploadQueue`1.RetryInterval">
            <summary>
                Amount of time to wait between each attempt.
            </summary>
            <value>
                Default is 5 seconds.
            </value>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadQueue`1.Dispose">
            <summary>
                Dispose queue
            </summary>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadQueue`1.Add(`0)">
            <summary>
                Add a new item to the queue. Will be uploaded directly if the queue is empty.
            </summary>
            <param name="item">item to enqueue</param>
            <exception cref="T:System.ArgumentNullException">item</exception>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadQueue`1.AddIfNotEmpty(`0,System.Action)">
            <summary>
                Add report queue if the queue is empty; otherwise invoke the delegate.
            </summary>
            <param name="dto">DTO to add to the queue</param>
            <param name="uploadTask">Task to invoke if queue is empty</param>
            <returns><c>true</c> if item was added to the queue; otherwise <c>false</c></returns>
        </member>
        <member name="E:Coderr.Client.Uploaders.UploadQueue`1.UploadFailed">
            <summary>
                Failed to deliver DTO within the given parameters.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadQueue`1.Dispose(System.Boolean)">
            <summary>
                Dispose pattern
            </summary>
            <param name="isFromDispose">invoked from Dispose() method.</param>
        </member>
        <member name="T:Coderr.Client.Uploaders.UploadReportFailedEventArgs">
            <summary>
                Event args for ReportingFailed
            </summary>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadReportFailedEventArgs.#ctor(System.Exception,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.Uploaders.UploadReportFailedEventArgs" /> class.
            </summary>
            <param name="exception">The exception.</param>
            <param name="dto">DTO that couldn't be uploaded.</param>
            <exception cref="T:System.ArgumentNullException">exception</exception>
        </member>
        <member name="P:Coderr.Client.Uploaders.UploadReportFailedEventArgs.Dto">
            <summary>
                DTO that could not be uploaded.
            </summary>
        </member>
        <member name="P:Coderr.Client.Uploaders.UploadReportFailedEventArgs.Exception">
            <summary>
                Exception generated by OTE (it can for instance be that you have configured the app key incorrectly).
            </summary>
        </member>
        <member name="T:Coderr.Client.Uploaders.UploadToCoderr">
            <summary>
                Upload reports to our web site.
            </summary>
            <remarks>
                <para>
                    To use this reporter you have to create an account at https://coderrapp.com and then register an application
                    to get an application key and a shared secret.
                </para>
                <para>
                    Finally use that information to configure this reporter:
                </para>
                <example>
                    <code>
            
            var uri = new Uri("http://coderr.yourdomain.com/");
            Err.Configuration.Uploaders.Add(new UploadToCoderr(uri, "yourAppKey",
                                                                        "yourSharedSecret"));
            Err.Configuration.UserInteraction.AskUserForDetails = false;
            </code>
                </example>
                <para>
                    Reports will be queued internally if there are no Internet connection available. The queue have the same
                    constrains as in the global
                    configuration.  Thus the oldest reports will be dropped if the connection is down and the queue limit have been
                    reached.
                </para>
                <para>
                    Nothing in the queue is persisted. Thus if the application are stopped before all reports have been uploaded,
                    they will
                    be lost. This is only a problem if the codeRR service is slow or if the Internet connection is down.
                </para>
                <para>
                    This uploader will check the Internet settings (that are configured in the windows control panel) to see if an
                    Internet proxy
                    is required. If it is, the HttpClient will be configured to use it. So this library should work behind
                    corporate firewalls.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadToCoderr.#ctor(System.Uri,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.Uploaders.UploadToCoderr" /> class.
            </summary>
            <param name="coderrServerAddress">
                Uri to the root of the codeRR web. Example.
                <code>http://yourWebServer/coderr/</code>
            </param>
            <param name="apiKey">The API key.</param>
            <param name="sharedSecret">The shared secret.</param>
            <exception cref="T:System.ArgumentNullException">apiKey</exception>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadToCoderr.#ctor(System.Uri,System.String,System.String,System.Func{System.Boolean},System.Func{System.Boolean})">
            <summary>
                Initializes a new instance of the <see cref="T:Coderr.Client.Uploaders.UploadToCoderr" /> class.
            </summary>
            <param name="coderrServerAddress">
                Uri to the root of the codeRR web. Example.
                <code>http://yourWebServer/coderr/</code>
            </param>
            <param name="apiKey">The API key.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="queueReportsAccessor">Used to access the property that determines if the reports should be queued or not.</param>
            <param name="throwExceptionsAccessor">Used to determine if the uploader can throw exceptions</param>
            <exception cref="T:System.ArgumentNullException">queueReportsAccessor</exception>
        </member>
        <member name="P:Coderr.Client.Uploaders.UploadToCoderr.ApiKey">
            <summary>
                API key as defined in codeRR Server.
            </summary>
        </member>
        <member name="P:Coderr.Client.Uploaders.UploadToCoderr.MaxAttempts">
            <summary>
                Max number of upload attempts per report
            </summary>
        </member>
        <member name="P:Coderr.Client.Uploaders.UploadToCoderr.MaxQueueSize">
            <summary>
                Max number of items that may wait in queue to get upload.
            </summary>
        </member>
        <member name="P:Coderr.Client.Uploaders.UploadToCoderr.RetryInterval">
            <summary>
                Amount of time to wait between each attempt
            </summary>
        </member>
        <member name="P:Coderr.Client.Uploaders.UploadToCoderr.SharedSecret">
            <summary>
                Shared secret as defined in the codeRR server.
            </summary>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadToCoderr.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadToCoderr.UploadReport(Coderr.Client.Contracts.ErrorReportDTO)">
            <summary>
                Upload the report to the web service.
            </summary>
            <param name="report">CreateReport to submit</param>
            <remarks>
                <para>
                    If
                </para>
            </remarks>
        </member>
        <member name="E:Coderr.Client.Uploaders.UploadToCoderr.UploadFailed">
            <summary>
                Failed to deliver DTO within the given parameters.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadToCoderr.UploadFeedback(Coderr.Client.Contracts.FeedbackDTO)">
            <summary>
                Send feedback for a previously submitted error report.
            </summary>
            <param name="feedback">Feedback to send</param>
            <remarks>
                <para>
                    Will be queued internally (in memory) if the OS reports that there are no Internet connection available.
                </para>
            </remarks>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadToCoderr.TryUploadReportNow(Coderr.Client.Contracts.ErrorReportDTO)">
            <summary>
                Try to upload a report directly
            </summary>
            <param name="report">Report to upload</param>
            <exception cref="T:System.Net.WebException">No internet connection is available; Destination server did not accept the report.</exception>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadToCoderr.Dispose(System.Boolean)">
            <summary>
                Dispose pattern
            </summary>
            <param name="isDisposing">Invoked from the dispose method.</param>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadToCoderr.TryUploadFeedbackNow(Coderr.Client.Contracts.FeedbackDTO)">
            <summary>
                Try to upload a report directly
            </summary>
            <param name="feedback">Report to upload</param>
            <exception cref="T:System.Net.WebException">No Internet connection is available; Destination server did not accept the report.</exception>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadToCoderr.CompressErrorReport(Coderr.Client.Contracts.ErrorReportDTO)">
            <summary>
                Compress an ErrorReport as JSON string
            </summary>
            <param name="errorReport">ErrorReport</param>
            <returns>Compressed JSON representation of the ErrorReport.</returns>
        </member>
        <member name="M:Coderr.Client.Uploaders.UploadToCoderr.DeflateErrorReport(System.Byte[])">
            <summary>
                Deflate a compressed error report in JSON format
            </summary>
            <param name="errorReport">Compressed JSON errorReport</param>
            <returns>JSON string decompressed</returns>
        </member>
    </members>
</doc>
